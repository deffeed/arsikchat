import os
import logging
import httpx
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# üîë –¢–æ–∫–µ–Ω—ã –∏–∑ Secrets
TELEGRAM_TOKEN = os.getenv("tgnok")
GROQ_API_KEY = os.getenv("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")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq Gemini
async def ask_groq(prompt: str) -> str:
    try:
        url = "https://api.groq.com/openai/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "gemma2-9b-it",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7
        }
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=payload)
            response.raise_for_status()
            data = response.json()
            return data["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Groq API: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini –æ—Ç Groq.\n–ù–∞–ø–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ!")

# –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    await update.message.reply_text("üí≠ –î—É–º–∞—é...")
    reply = await ask_groq(user_text)
    await update.message.reply_text(reply)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TELEGRAM_TOKEN or not GROQ_API_KEY:
        logger.error("‚ùå –ù–µ—Ç TELEGRAM_TOKEN –∏–ª–∏ GROQ_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
        return

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
